/******************************************************************************
Finite State Machine
Project: GPS Logger
Description: The Finite State Machine that manage the GPS Logger

Generated by gv_fsm ruby gem, see https://rubygems.org/gems/gv_fsm
gv_fsm version 0.3.3
Generation date: 2022-07-20 19:18:11 +0200
Generated from: gps_logger.dot
The finite state machine has:
  6 states
  6 transition functions
******************************************************************************/

#ifndef FSM_GPS_LOGGER_H
#define FSM_GPS_LOGGER_H
#include <stdlib.h>

// State data object
// By default set to void; override this typedef or load the proper
// header if you need
typedef void state_data_t;

// NOTHING SHALL BE CHANGED AFTER THIS LINE!

// List of states
typedef enum {
    STATE_UNINITIALIZED = 0,
    STATE_INIT,
    STATE_IDLE,
    STATE_RUN,
    STATE_STOP,
    STATE_ERROR,
    NUM_STATES,
    NO_CHANGE
} state_t;

// State human-readable names
extern const char *state_names[];

// State function and state transition prototypes
typedef state_t state_func_t(state_data_t *data);
typedef void transition_func_t(state_data_t *data);

// State functions

// Function to be executed in state uninitialized
// valid return states: STATE_INIT
state_t do_uninitialized(state_data_t *data);

// Function to be executed in state init
// valid return states: STATE_UNINITIALIZED, STATE_IDLE
state_t do_init(state_data_t *data);

// Function to be executed in state idle
// valid return states: NO_CHANGE, STATE_UNINITIALIZED, STATE_INIT, STATE_IDLE, STATE_RUN
state_t do_idle(state_data_t *data);

// Function to be executed in state run
// valid return states: STATE_STOP
state_t do_run(state_data_t *data);

// Function to be executed in state stop
// valid return states: STATE_UNINITIALIZED, STATE_INIT
state_t do_stop(state_data_t *data);

// Function to be executed in state error
// valid return states: STATE_UNINITIALIZED, STATE_INIT
state_t do_error(state_data_t *data);

// List of state functions
extern state_func_t *const state_table[NUM_STATES];

// Transition functions
void to_init(state_data_t *data);
void reset(state_data_t *data);
void to_idle(state_data_t *data);
void stay(state_data_t *data);
void to_run(state_data_t *data);
void to_stop(state_data_t *data);

// Table of transition functions
extern transition_func_t *const transition_table[NUM_STATES][NUM_STATES];

// state manager
state_t run_state(state_t cur_state, state_data_t *data);

#endif
