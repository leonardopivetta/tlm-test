/******************************************************************************
Finite State Machine
Project: Telemetry
Description: The Finite State Machine that manage the Telemetry

Generated by gv_fsm ruby gem, see https://rubygems.org/gems/gv_fsm
gv_fsm version 0.3.3
Generation date: 2022-07-20 19:17:54 +0200
Generated from: smtest.dot
The finite state machine has:
  6 states
  5 transition functions
******************************************************************************/

#ifndef FSM_TELEMETRY_H
#define FSM_TELEMETRY_H
#include <stdlib.h>

#define CANLIB_TIMESTAMP
#include "thirdparty/can/lib/primary/c/ids.h"
#include "thirdparty/can/lib/secondary/c/ids.h"
#include "thirdparty/can/lib/primary/c/network.h"
#include "thirdparty/can/lib/secondary/c/network.h"
#include "thirdparty/can/proto/primary/cpp/mapping.h"
#include "thirdparty/can/proto/secondary/cpp/mapping.h"


#include "state_machines/SharedData.h"


/////////////
// DEFINES //
/////////////

#define TEL_ERROR_CHECK                            			\
    if(data->GetError() != data->TelemetryError::TEL_NONE) {\
        next_state = STATE_ERROR;							\
		return next_state;									\
	}

// State data object
// By default set to void; override this typedef or load the proper
// header if you need
typedef SharedData state_data_t;

// NOTHING SHALL BE CHANGED AFTER THIS LINE!

// State human-readable names
extern const char *state_names[];

// State function and state transition prototypes
typedef state_t state_func_t(state_data_t *data);
typedef state_t transition_func_t(state_data_t *data);

// State functions

// Function to be executed in state uninitialized
// valid return states: STATE_INIT
state_t do_uninitialized(state_data_t *data);

// Function to be executed in state init
// valid return states: STATE_UNINITIALIZED, STATE_IDLE
state_t do_init(state_data_t *data);

// Function to be executed in state idle
// valid return states: STATE_UNINITIALIZED, STATE_INIT, STATE_RUN
state_t do_idle(state_data_t *data);

// Function to be executed in state run
// valid return states: STATE_STOP
state_t do_run(state_data_t *data);

// Function to be executed in state stop
// valid return states: STATE_UNINITIALIZED, STATE_INIT
state_t do_stop(state_data_t *data);

// Function to be executed in state error
// valid return states: STATE_UNINITIALIZED, STATE_INIT
state_t do_error(state_data_t *data);

// List of state functions
extern state_func_t *const state_table[NUM_STATES];

// Transition functions
state_t to_init(state_data_t *data);
state_t reset(state_data_t *data);
state_t to_idle(state_data_t *data);
state_t to_run(state_data_t *data);
state_t to_stop(state_data_t *data);

// Table of transition functions
extern transition_func_t *const transition_table[NUM_STATES][NUM_STATES];

// state manager
state_t run_state(state_t cur_state, state_data_t *data);

#endif
